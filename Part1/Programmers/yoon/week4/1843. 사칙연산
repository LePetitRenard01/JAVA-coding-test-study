import java.util.*;

public class Solution {
    public static int solution(String[] arr) {
        int n = arr.length / 2 + 1; // 숫자의 개수
        int[][] maxDp = new int[n][n]; // 최대값 저장
        int[][] minDp = new int[n][n]; // 최소값 저장

        // 숫자 초기화
        for (int i = 0; i < n; i++) {
            int num = Integer.parseInt(arr[i * 2]);
            maxDp[i][i] = num;
            minDp[i][i] = num;
        }

        // DP 테이블 채우기
        for (int size = 1; size < n; size++) { // 부분 수식의 길이
            for (int i = 0; i < n - size; i++) { // 시작 인덱스
                int j = i + size; // 끝 인덱스
                maxDp[i][j] = Integer.MIN_VALUE;
                minDp[i][j] = Integer.MAX_VALUE;

                for (int k = i; k < j; k++) { // 연산자 위치
                    char operator = arr[k * 2 + 1].charAt(0);
                    if (operator == '+') {
                        maxDp[i][j] = Math.max(maxDp[i][j], maxDp[i][k] + maxDp[k + 1][j]);
                        minDp[i][j] = Math.min(minDp[i][j], minDp[i][k] + minDp[k + 1][j]);
                    } else if (operator == '-') {
                        maxDp[i][j] = Math.max(maxDp[i][j], maxDp[i][k] - minDp[k + 1][j]);
                        minDp[i][j] = Math.min(minDp[i][j], minDp[i][k] - maxDp[k + 1][j]);
                    }
                }
            }
        }

        return maxDp[0][n - 1]; // 전체 식의 최댓값
    }

    public static void main(String[] args) {
        // 테스트 케이스
        String[] arr1 = {"1", "-", "3", "+", "5", "-", "8"};
        System.out.println(solution(arr1)); // 출력: 1

        String[] arr2 = {"5", "-", "3", "+", "1", "+", "2", "-", "4"};
        System.out.println(solution(arr2)); // 출력: 3
    }
}

import java.util.*;
import java.io.*;

class Main {
    static final int INF = Integer.MAX_VALUE;
    static List<List<Node>> graph;
    static int[] distance;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int V = Integer.parseInt(st.nextToken()); // 정점의 개수
        int E = Integer.parseInt(st.nextToken()); // 간선의 개수
        int K = Integer.parseInt(br.readLine()); // 시작 정점 번호

        graph = new ArrayList<>();
        distance = new int[V + 1];

        // 그래프 초기화
        for (int i = 0; i <= V; i++) {
            graph.add(new ArrayList<>());
            distance[i] = INF;
        }

        // 간선 정보 입력 받기
        for (int i = 0; i < E; i++) {
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());
            graph.get(u).add(new Node(v, w));
        }

        // 다익스트라 알고리즘 수행
        dijkstra(K);

        // 결과 출력
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i <= V; i++) {
            if (distance[i] == INF) {
                sb.append("INF\n");
            } else {
                sb.append(distance[i]).append("\n");
            }
        }
        System.out.print(sb);
    }

    // 다익스트라 알고리즘 구현
    public static void dijkstra(int start) {
        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.offer(new Node(start, 0));
        distance[start] = 0;

        while (!pq.isEmpty()) {
            Node current = pq.poll();
            int curNode = current.vertex;
            int curDist = current.weight;

            // 이미 처리된 노드인지 확인
            if (curDist > distance[curNode]) continue;

            // 인접 노드 확인
            for (Node neighbor : graph.get(curNode)) {
                int nextDist = distance[curNode] + neighbor.weight;

                // 최단 거리 갱신
                if (nextDist < distance[neighbor.vertex]) {
                    distance[neighbor.vertex] = nextDist;
                    pq.offer(new Node(neighbor.vertex, nextDist));
                }
            }
        }
    }
}

// 우선순위 큐에 사용할 Node 클래스 정의
class Node implements Comparable<Node> {
    int vertex;
    int weight;

    public Node(int vertex, int weight) {
        this.vertex = vertex;
        this.weight = weight;
    }

    @Override
    public int compareTo(Node other) {
        return Integer.compare(this.weight, other.weight);
    }
}

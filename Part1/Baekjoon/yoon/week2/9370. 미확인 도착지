import java.util.*;
import java.io.*;

public class Main {
    static class Edge {
        int node, cost;
        Edge(int node, int cost) {
            this.node = node;
            this.cost = cost;
        }
    }

    static final int INF = Integer.MAX_VALUE;
    static int n, m, t, s, g, h;
    static List<Edge>[] graph;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        int T = Integer.parseInt(br.readLine());

        while (T-- > 0) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            n = Integer.parseInt(st.nextToken());
            m = Integer.parseInt(st.nextToken());
            t = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(br.readLine());
            s = Integer.parseInt(st.nextToken());
            g = Integer.parseInt(st.nextToken());
            h = Integer.parseInt(st.nextToken());

            graph = new ArrayList[n + 1];
            for (int i = 1; i <= n; i++) graph[i] = new ArrayList<>();

            int ghCost = 0;
            for (int i = 0; i < m; i++) {
                st = new StringTokenizer(br.readLine());
                int a = Integer.parseInt(st.nextToken());
                int b = Integer.parseInt(st.nextToken());
                int d = Integer.parseInt(st.nextToken());
                graph[a].add(new Edge(b, d));
                graph[b].add(new Edge(a, d));
                if ((a == g && b == h) || (a == h && b == g)) ghCost = d;
            }

            int[] distFromS = dijkstra(s);
            int[] distFromG = dijkstra(g);
            int[] distFromH = dijkstra(h);

            List<Integer> destinations = new ArrayList<>();
            for (int i = 0; i < t; i++) {
                int x = Integer.parseInt(br.readLine());
                int direct = distFromS[x];
                int viaGH = Math.min(distFromS[g] + ghCost + distFromH[x],
                                     distFromS[h] + ghCost + distFromG[x]);

                if (direct == viaGH) destinations.add(x);
            }

            Collections.sort(destinations);
            for (int dest : destinations) sb.append(dest).append(" ");
            sb.append("\n");
        }
        System.out.print(sb);
    }

    static int[] dijkstra(int start) {
        PriorityQueue<Edge> pq = new PriorityQueue<>(Comparator.comparingInt(e -> e.cost));
        int[] dist = new int[n + 1];
        Arrays.fill(dist, INF);
        dist[start] = 0;
        pq.offer(new Edge(start, 0));

        while (!pq.isEmpty()) {
            Edge edge = pq.poll();
            int current = edge.node;
            int currentCost = edge.cost;

            if (currentCost > dist[current]) continue;

            for (Edge next : graph[current]) {
                int nextNode = next.node;
                int newCost = currentCost + next.cost;

                if (newCost < dist[nextNode]) {
                    dist[nextNode] = newCost;
                    pq.offer(new Edge(nextNode, newCost));
                }
            }
        }
        return dist;
    }
}

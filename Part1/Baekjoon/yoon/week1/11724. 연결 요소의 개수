# 랜카드 고장 이슈로 오늘 (11/5)에 3개 올립니다!


import java.util.ArrayList;
import java.util.Scanner;

public class ConnectedComponents {
    static ArrayList<Integer>[] graph;
    static boolean[] visited;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // 정점과 간선의 개수 입력
        int n = scanner.nextInt(); // 정점의 수
        int m = scanner.nextInt(); // 간선의 수

        // 그래프 초기화
        graph = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }

        // 간선 정보 입력
        for (int i = 0; i < m; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            graph[u].add(v);
            graph[v].add(u);
        }

        // 방문 배열 초기화
        visited = new boolean[n + 1];
        int components = 0;

        // 모든 노드를 순회하며 연결 요소 찾기
        for (int i = 1; i <= n; i++) {
            if (!visited[i]) { // 방문하지 않은 노드 발견 시 DFS 실행
                dfs(i);
                components++; // 새로운 연결 요소 발견 시 개수 증가
            }
        }

        // 결과 출력
        System.out.println(components);
    }

    // DFS 구현
    static void dfs(int node) {
        visited[node] = true;

        for (int neighbor : graph[node]) {
            if (!visited[neighbor]) {
                dfs(neighbor);
            }
        }
    }
}

# 랜카드 고장 이슈로 오늘 (11/5)에 3개 올립니다!


import java.util.*;

public class KinshipCalculator {
    static ArrayList<Integer>[] graph;
    static boolean[] visited;
    static int[] distance;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // 전체 사람 수 입력
        int n = scanner.nextInt();

        // 촌수를 계산할 두 사람의 번호 입력
        int person1 = scanner.nextInt();
        int person2 = scanner.nextInt();

        // 부모 자식 관계의 개수 입력
        int m = scanner.nextInt();

        // 그래프 초기화
        graph = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }

        // 부모 자식 관계 입력 및 그래프 구성
        for (int i = 0; i < m; i++) {
            int parent = scanner.nextInt();
            int child = scanner.nextInt();
            graph[parent].add(child);
            graph[child].add(parent);
        }

        // 촌수 계산
        int result = bfs(person1, person2);

        // 결과 출력
        System.out.println(result);
    }

    // BFS를 사용하여 촌수 계산
    static int bfs(int start, int target) {
        Queue<Integer> queue = new LinkedList<>();
        visited = new boolean[graph.length];
        distance = new int[graph.length];

        // 시작 노드 초기화
        queue.add(start);
        visited[start] = true;
        distance[start] = 0;

        while (!queue.isEmpty()) {
            int current = queue.poll();

            // 타겟 노드에 도달하면 거리 반환
            if (current == target) {
                return distance[current];
            }

            // 현재 노드에 연결된 모든 인접 노드 탐색
            for (int neighbor : graph[current]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    distance[neighbor] = distance[current] + 1;
                    queue.add(neighbor);
                }
            }
        }

        // 타겟 노드에 도달하지 못한 경우
        return -1;
    }
}

class Solution {
    public int solution(int[][] triangle) {
        int height = triangle.length;
        int[][] dp = new int[height][height];

        // 첫 번째 값 초기화
        dp[0][0] = triangle[0][0];

        // 각 층마다 최대 합 구하기
        for (int i = 1; i < height; i++) {
            for (int j = 0; j <= i; j++) {
                // 왼쪽 대각선 위에서 내려오는 경우
                if (j == 0) {
                    dp[i][j] = dp[i - 1][j] + triangle[i][j];
                }
                // 오른쪽 대각선 위에서 내려오는 경우
                else if (j == i) {
                    dp[i][j] = dp[i - 1][j - 1] + triangle[i][j];
                }
                // 왼쪽과 오른쪽 중 큰 값을 선택하여 내려오는 경우
                else {
                    dp[i][j] = Math.max(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j];
                }
            }
        }

        // 마지막 행에서 최대값 구하기
        int maxSum = 0;
        for (int j = 0; j < height; j++) {
            maxSum = Math.max(maxSum, dp[height - 1][j]);
        }

        return maxSum;
    }
}

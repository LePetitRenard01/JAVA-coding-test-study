import java.io.*;
import java.util.*;

public class Main {
    static final int INF = 100000000;
    static int N, E;
    static ArrayList<ArrayList<Node>> graph;

    static class Node implements Comparable<Node> {
        int vertex;
        int cost;

        public Node(int vertex, int cost) {
            this.vertex = vertex;
            this.cost = cost;
        }

        @Override
        public int compareTo(Node other) {
            return this.cost - other.cost;
        }
    }

    public static int dijkstra(int start, int end) {
        PriorityQueue<Node> pq = new PriorityQueue<>();
        int[] dist = new int[N + 1];
        Arrays.fill(dist, INF);
        dist[start] = 0;
        pq.add(new Node(start, 0));

        while (!pq.isEmpty()) {
            Node current = pq.poll();
            int curVertex = current.vertex;
            int curCost = current.cost;

            if (curCost > dist[curVertex]) continue;

            for (Node neighbor : graph.get(curVertex)) {
                int nextVertex = neighbor.vertex;
                int nextCost = curCost + neighbor.cost;

                if (nextCost < dist[nextVertex]) {
                    dist[nextVertex] = nextCost;
                    pq.add(new Node(nextVertex, nextCost));
                }
            }
        }
        return dist[end];
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());

        graph = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            graph.add(new ArrayList<>());
        }

        // 간선 입력
        for (int i = 0; i < E; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());
            graph.get(a).add(new Node(b, c));
            graph.get(b).add(new Node(a, c));
        }

        // 필수 경로의 두 정점 v1, v2
        st = new StringTokenizer(br.readLine());
        int v1 = Integer.parseInt(st.nextToken());
        int v2 = Integer.parseInt(st.nextToken());

        // 경로 1: 1 -> v1 -> v2 -> N
        int route1 = 0;
        route1 += dijkstra(1, v1);
        route1 += dijkstra(v1, v2);
        route1 += dijkstra(v2, N);

        // 경로 2: 1 -> v2 -> v1 -> N
        int route2 = 0;
        route2 += dijkstra(1, v2);
        route2 += dijkstra(v2, v1);
        route2 += dijkstra(v1, N);

        // 두 경로 중 최소 거리 선택
        int result = Math.min(route1, route2);
        if (result >= INF) {
            System.out.println(-1);
        } else {
            System.out.println(result);
        }
    }
}

import java.io.*;
import java.util.*;

public class Main {
    static final int MOD = 1_000_000_009;
    static int N, M, x, y;
    static List<Edge>[] adj;
    static long[] dist;
    static int[] transfers;
    static long[] pathCount;

    static class Edge {
        int node, line;
        long weight;

        Edge(int node, long weight, int line) {
            this.node = node;
            this.weight = weight;
            this.line = line;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        x = Integer.parseInt(st.nextToken()) - 1;
        y = Integer.parseInt(st.nextToken()) - 1;

        adj = new ArrayList[N];
        dist = new long[N];
        transfers = new int[N];
        pathCount = new long[N];

        for (int i = 0; i < N; i++) {
            adj[i] = new ArrayList<>();
            dist[i] = Long.MAX_VALUE;
            transfers[i] = Integer.MAX_VALUE;
        }

        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken()) - 1;
            int v = Integer.parseInt(st.nextToken()) - 1;
            int w = Integer.parseInt(st.nextToken());
            adj[u].add(new Edge(v, w, i));
        }

        dijkstra();

        if (dist[y] == Long.MAX_VALUE) {
            System.out.println(-1);
        } else {
            System.out.println(dist[y]);
            System.out.println(transfers[y]);
            System.out.println(pathCount[y]);
        }
    }

    static void dijkstra() {
        PriorityQueue<long[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] == b[0]) {
                return Long.compare(a[1], b[1]);
            }
            return Long.compare(a[0], b[0]);
        });

        dist[x] = 0;
        transfers[x] = 0;
        pathCount[x] = 1;
        pq.add(new long[]{0, 0, x});

        while (!pq.isEmpty()) {
            long[] current = pq.poll();
            long currentDist = current[0];
            int currentTransfers = (int) current[1];
            int node = (int) current[2];

            if (currentDist > dist[node] || (currentDist == dist[node] && currentTransfers > transfers[node])) {
                continue;
            }

            for (Edge edge : adj[node]) {
                int nextNode = edge.node;
                long newDist = currentDist + edge.weight;
                int newTransfers = currentTransfers + 1;

                if (newDist < dist[nextNode] || (newDist == dist[nextNode] && newTransfers < transfers[nextNode])) {
                    dist[nextNode] = newDist;
                    transfers[nextNode] = newTransfers;
                    pathCount[nextNode] = pathCount[node];
                    pq.add(new long[]{newDist, newTransfers, nextNode});
                } else if (newDist == dist[nextNode] && newTransfers == transfers[nextNode]) {
                    pathCount[nextNode] = (pathCount[nextNode] + pathCount[node]) % MOD;
                }
            }
        }
    }
}

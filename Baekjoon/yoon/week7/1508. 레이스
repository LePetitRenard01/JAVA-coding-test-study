import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // 입력 받기
        int N = sc.nextInt();
        int M = sc.nextInt();
        int K = sc.nextInt();
        int[] positions = new int[K];

        for (int i = 0; i < K; i++) {
            positions[i] = sc.nextInt();
        }

        // 이분 탐색으로 최대 거리 찾기
        int left = 1; // 최소 거리
        int right = N; // 최대 거리
        int[] result = new int[K];

        while (left <= right) {
            int mid = (left + right) / 2;
            if (canPlaceJudges(positions, M, mid, result)) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        // 결과 출력
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < K; i++) {
            if (result[i] == 1) {
                sb.append("1");
            } else {
                sb.append("0");
            }
        }
        System.out.println(sb.toString());
    }

    // 주어진 거리로 심판을 배치할 수 있는지 확인
    private static boolean canPlaceJudges(int[] positions, int M, int minDistance, int[] result) {
        int placed = 0;
        int lastPosition = -1;
        int[] tempResult = new int[positions.length];

        for (int i = 0; i < positions.length; i++) {
            if (lastPosition == -1 || positions[i] - lastPosition >= minDistance) {
                tempResult[i] = 1;
                placed++;
                lastPosition = positions[i];
            }
        }

        if (placed >= M) {
            System.arraycopy(tempResult, 0, result, 0, tempResult.length);
            return true;
        }
        return false;
    }
}

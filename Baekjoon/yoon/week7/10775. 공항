import java.util.Scanner;

public class AirportDocking {
    static int[] parent;

    // 특정 게이트의 루트(대표 노드)를 찾는 함수
    public static int find(int x) {
        if (parent[x] == x) {
            return x; // 자기 자신이 루트일 경우 그대로 반환
        }
        return parent[x] = find(parent[x]); // 경로 압축(Path Compression) 수행
    }

    // 두 게이트를 병합하는 함수
    public static void union(int a, int b) {
        int rootA = find(a); // a의 루트 찾기
        int rootB = find(b); // b의 루트 찾기
        if (rootA != rootB) {
            parent[rootA] = rootB; // 두 집합을 병합
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // 입력 처리
        int G = sc.nextInt(); // 게이트 수 입력
        int P = sc.nextInt(); // 비행기 수 입력

        parent = new int[G + 1];
        for (int i = 0; i <= G; i++) {
            parent[i] = i; // 초기화: 각 게이트가 자기 자신을 가리키도록 설정
        }

        int dockedPlanes = 0; // 도킹된 비행기 수

        for (int i = 0; i < P; i++) {
            int gi = sc.nextInt(); // 현재 비행기가 도킹 가능한 최대 게이트 번호
            int availableGate = find(gi); // 도킹 가능한 게이트 중 가장 큰 번호 찾기

            if (availableGate == 0) {
                break; // 더 이상 도킹할 게이트가 없으면 종료
            }

            union(availableGate, availableGate - 1); // 현재 게이트를 사용하고, 그 이전 게이트와 병합
            dockedPlanes++; // 도킹된 비행기 수 증가
        }

        System.out.println(dockedPlanes); // 도킹된 비행기 수 출력
        sc.close();
    }
}
